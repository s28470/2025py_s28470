"""
DNA FASTA Sequence Generator

This program was initially generated by a large language model (LLM) and later improved.
Its purpose is to generate a random DNA sequence of a specified length, insert the user's name at a random position
(excluded from length and statistics), and save the result in a properly formatted FASTA file.

The program also calculates and displays nucleotide composition percentages and the CG/AT ratio.
This tool is useful for practicing bioinformatics file formatting and basic sequence analysis.

Author: s28470
"""

import random

# Ask the user for inputs
length = int(input("Enter the sequence length: "))  # User specifies how many DNA nucleotides to generate
seq_id = input("Enter the sequence ID: ")           # ID of the sequence (used in FASTA header and filename)
description = input("Provide a description of the sequence: ")  # Description added to FASTA header
name = input("Enter your name: ")                   # Name to insert randomly in the sequence

# === GENERATION OF DNA SEQUENCE ===

# ORIGINAL:
# sequence = ""
# for _ in range(length):
#     sequence += random.choice("ACGT")

# MODIFIED (replaced inefficient string concatenation with list + join for better performance):
sequence = ''.join(random.choices("ACGT", k=length))

# Insert the name into a random position, without affecting stats
insert_pos = random.randint(0, len(sequence))
sequence_with_name = sequence[:insert_pos] + name + sequence[insert_pos:]

# === WRITING TO FASTA FILE ===

file_name = f"{seq_id}.fasta"

# ORIGINAL:
# with open(file_name, "w") as file:
#     file.write(f">{seq_id} {description}\n")
#     file.write(sequence_with_name + "\n")

# MODIFIED (added FASTA line-wrapping at 60 characters for compatibility and readability):
with open(file_name, "w") as file:
    file.write(f">{seq_id} {description}\n")
    for i in range(0, len(sequence_with_name), 60):
        file.write(sequence_with_name[i:i+60] + "\n")

# === STATISTICS ===

# We calculate stats based on original sequence (without name)
a = sequence.count("A")
c = sequence.count("C")
g = sequence.count("G")
t = sequence.count("T")
total = a + c + g + t  # Should be equal to 'length'

# ORIGINAL:
# print(f"A: {a / total * 100:.1f}%")

# MODIFIED (increased precision of percentage values to 2 decimal places for better accuracy):
print(f"The sequence was saved to the file {file_name}")
print("Sequence statistics:")
print(f"A: {a / total * 100:.2f}%")
print(f"C: {c / total * 100:.2f}%")
print(f"G: {g / total * 100:.2f}%")
print(f"T: {t / total * 100:.2f}%")
print(f"%CG: {(c + g) / total * 100:.2f}")